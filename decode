#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct letter{
    char value;
    int frequence;
    char code[9];
    struct letter *right;
    struct letter *left;
    int digit;
    int counter;
    int flag;
};
unsigned char* open_file(struct letter **base, int *base_size, int *converted_size);
struct letter* build_tree(struct letter *leafs, int *tree_size);
int find_min(struct letter *a, int a_size, int *first_min, int *second_min);
void create_code(struct letter *node, char cod[]);

int main(void){
    struct letter *data;
	int data_size, binary_size, size;
	unsigned char *binary_text;
	binary_text=open_file(&data, &data_size, &binary_size);
	printf("nnnn");
	for(int i=0; i<data_size; i++){
    	printf("\n%c**%d**{%d}", data[i].value, data[i].frequence, data[i].flag);
	
	}

	size=data_size;
	struct letter *root = build_tree(data, &size);
	
	for(int i=0; i<size; i++){
    	printf("\n%c**%d**%s{%d}", root[i].value, root[i].frequence, root[i].code, root[i].flag);
	}
	
	for (int i = 0; i < size; i++) {
        if (root[i].flag == 0) {
            create_code(&root[i], NULL);
    	}
    
	
	
}
}
void create_code(struct letter *node, char cod[]) {
	
	if(node->flag==0){
		node->code[0]='\0';
	}else{
		strcat(node->code, cod);
	}
	char code[3];

    if (node->left != NULL) {
        strcpy(node->left->code, node->code);
        create_code(node->left, "0");
    }
    if (node->right != NULL) {
        strcpy(node->right->code, node->code);
        create_code(node->right, "1");
    }
    
	return;
}

int find_min(struct letter *a, int a_size, int *first_min, int *second_min) {
    int end = 1;
    *first_min = a_size - 1;
    for (int i = 0; i < a_size; i++) {
        if (a[i].flag == 0 && a[i].frequence < a[*first_min].frequence) {
            *first_min = i;
        }
    }
    a[*first_min].flag = 1;
    for (int i = 0; i < a_size; i++) {
        if (a[i].flag == 0) {
            *second_min = i;
            end = 0;
            break;
        }
    }
    if (end) {
        return 0;
    }
    for (int i = 0; i < a_size; i++) {
        if (a[i].flag == 0 && a[i].frequence < a[*second_min].frequence) {
            *second_min = i;
        }
    }
    a[*second_min].flag = 1;
    return 1;
}


struct letter* build_tree(struct letter *leafs, int *tree_size) {
	
    struct letter *main_tree = (struct letter *)malloc(*tree_size * 2 * sizeof(struct letter));
    if (!main_tree) {
        perror("Memory allocation failed  main tree");
        return NULL;
    }

    for (int i = 0; i < (*tree_size) * 2; i++) {
        main_tree[i].code[0] = '\0';
        main_tree[i].left = NULL;
        main_tree[i].right = NULL;
        main_tree[i].flag = 0;
        main_tree[i].value = '\0';
        main_tree[i].frequence = 0;
        main_tree[i].digit=0;
        main_tree[i].counter=0;
    }
    
    main_tree = leafs;
    for (int i = 0; i < (*tree_size) * 2; i++) {
        printf("\n%c^^%d{%d}", main_tree[i].value, main_tree[i].frequence, main_tree[i].flag);
    }
    
    int min1 = 0, min2 = 0;

    while (find_min(main_tree, *tree_size, &min1, &min2)) {
        main_tree[*tree_size].left = &main_tree[min1];
        main_tree[*tree_size].right = &main_tree[min2];
        main_tree[(*tree_size)++].frequence = main_tree[min1].frequence + main_tree[min2].frequence;
    }
    
    main_tree[min1].flag = 0;
    return main_tree;
}

unsigned char* open_file(struct letter *base, int *base_size, int *converted_size) {
	base=(struct letter*)malloc(999999*sizeof(struct letter));
	if (!base) {
	        perror("Memory allocation failed");
	        exit(EXIT_FAILURE);
	}
	   
	FILE *in;
	in=fopen("output.txt","r");
	*base_size=0;
	while(fscanf(in,"%c %d ",&base[*base_size].value,&base[*base_size].frequence)==2){
		base[*base_size].code[0]='\0';
		base[*base_size].right=NULL;
		base[*base_size].left=NULL;
		base[*base_size].flag=0;
		base[*base_size].digit=0;
		base[*base_size].counter=0;
		(*base_size)++;
		printf("bbb\n");
	}
	base=(struct letter*)realloc(base,(*base_size)*sizeof(struct letter));
	if (!base) {
	        perror("Memory allocation failed base realloc");
	        exit(EXIT_FAILURE);
	}
	
	for(int i=0;i<*base_size;i++){
		printf("%c * %d\n",base[i].value,base[i].frequence);
	}
	
	unsigned char x, *code_arr=(unsigned char*)malloc(99999*sizeof(unsigned char));
	int syc=0, *bin=(int*)malloc(99999*sizeof(int));
	
	while (fread(&x, sizeof(unsigned char), 1, in) == 1) {
       	if (x != L'\n') {
	        bin[syc]=x;
	    }
	    printf("%c * %d\n", x, bin[syc++]);
	}
    
	int temp;
	for(int i=0;i<syc;i++){
	    temp=bin[i];
	    for(int j=7;j>=0;j--){
	    	if(temp==0){
	    		code_arr[j+(8*i)]=0;
			}else{
	    		code_arr[j+(8*i)]=temp%2;
	    		temp/=2;
			}
				
		}
			
	}
	*converted_size=syc*8;
	for(int i=0; i<8*syc; i++){
		printf("%d",code_arr[i]); 
	}
	
	return code_arr;
		
}




